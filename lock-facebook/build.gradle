apply plugin: 'com.android.library'

def semver = defineVersion()
version = semver.stringVersion

logger.lifecycle("Using version ${version} for ${name}")

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            // Configure whether failing tests should fail the build
            ignoreFailures false

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
        }
    }

    lintOptions {
        lintConfig file('../gradle/lint.xml')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.1.0'
    compile 'com.auth0.android:auth0:1.4.0'
    compile 'com.facebook.android:facebook-android-sdk:4.18.0'
    testCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    testCompile 'org.robolectric:robolectric:3.1.2'
    testCompile 'org.hamcrest:hamcrest-integration:1.3'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile('com.squareup:fest-android:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
}

def defineVersion() {
    def current = describeGit(false)
    def snapshot = current == null
    if (snapshot) {
        current = describeGit(snapshot, "0.0.1")
    }
    return new Semver(snapshot: snapshot, version: current)
}

def describeGit(boolean snapshot, String defaultValue = null) {
    def arguments = ['describe', '--tags']
    arguments.add(snapshot ? '--abbrev=0' : '--exact-match')
    def stdout = new ByteArrayOutputStream()
    def string = defaultValue
    try {
        def result = project.exec {
            executable = 'git'
            args = arguments
            standardOutput = stdout
        }

        result.assertNormalExitValue()

        if (stdout.toByteArray().length > 0) {
            string = stdout.toString().replace("\n", "")
        }
    } catch (Exception e) {
        logger.debug("Failed git describe command", e)
    } finally {
        stdout.close()
    }
    return string
}

class Semver {
    def version
    def snapshot

    def getStringVersion() {
        return snapshot ? version + "-SNAPSHOT" : version
    }
}

apply from: '../scripts/maven.gradle'
apply from: '../scripts/bintray.gradle'